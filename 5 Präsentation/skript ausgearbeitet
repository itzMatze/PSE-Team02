Schauspiel

So, ihr habt jetzt unsere Motivation anschaulich gesehen. Ziel unserer App ist es, dass man nicht allein an der Mensa essen gehen muss und die Chance hat neue Kontakte zu knüpfen. Gerade für Menschen, die keinen Anschluss gefunden haben oder Studenten die ein Auslandssemester machen dürfte das Interessant sein, aber natürlich auch für alle jene, deren Freunde gerade keine Zeit haben.
Uns war wichtig, dass es keine Dating App wird, deshalb haben wir auf die Möglichkeit Profilbilder hochzuladen bewusst verzichtet.

>>Folie mit Screenshot bei ProfilbildAuswahl

Momentan kann man durch das eigene Motto im Profil und das Gruppenmotto die Möglich Persönlichkeit zu verleihen

Desweiteren hat ein Gruppengründer keine Sonderrechte, er kann nicht die Gruppe löschen und vorallem keine Mitglieder rauskicken, er kann lediglich selbst austreten, aber sofern andere Mitgieder drin waren, bleibt die Gruppe dann einfach bestehen.
Unvoreingenommen. 

>>Folie mit Screenshot innerhalb einer Gruppe


Nun wollen wir noch ein wenig darüber reden wie wir die App umgesetzt haben.
In der Definitionsphase, haben wir neben den Wunsch/Musskriterien und funktionalen anforderungen auch schon auf die Frameworks festgelegt.

>>Folie mit allen Frameworks (Mindmap-artig die Namen auf der Folie verteilt, nicht als Liste)

Für die Client seite war klar, dass wir mit Android Studio arbeiten werden, immerhin sollte es eine Android App werden. Zudem haben wir Firebase genutzt für die Resgistrierung und Verwaltung der User und Jackson Object Mapper für die Umwandlung von JSon Daten in Klassen, da der Server nur JSon an den Client sendet.   Auf Server Seite haben wir uns entschieden Springboot, weil vorallem für ein nicht-umfangreiches projekt schnell ein Grundgerüst steht, so dass wenig Konfiguartionsarbeit anfällt und wir damit dependency Injection und Schnittstellen zum einbinden von der Datenbank, für welche wir Mysql verwendet haben, nutzen konnten. 

In der Entwurfsphase, in der wir unzählige UML Diagramme erstellten. oder um genau zu sein: 

>>Folie mit Zahlen wie viele Diagramme es jeweils gab (Kreisdiagramm)





Matze: 

In der Implementierungsphase haben wir dann versucht unser Design möglichst so umzusetzen. 
  
Beim Client musste bei der Implementierung allerdings einiges anders gemacht werden als geplant und auch einiges ergänzt werden. Das lag vor allem daran, dass wir  mit Android Studio und der Funktionsweise von Activitys und deren Lebenszyklen noch sehr wenig Erfahrung hatten. 
Daher war es schwer einen detaiilierten Entwurf im vorraus zu erstellen und an dieser Stelle sehen wir das als Nachteil des Wasserfallmodells, weil man damit alles komplett festgelegt ist und dieses Modell eigentlich keine nachträglichen Änderungen zum Entwurf erlaubt. Man hätte also einen perfekt durchdachten Entwurf, der auch schon komplett funktiontüchtig wäre, machen müssen, was mit unserem Erfahrungslevel einfach nicht möglich war.




Tan:

Für die Server-Seite der anwendung hat das gut funktioniert und wir mussten nur wenige winzige Änderungen vornehmen an unseren Model-Klassen und kleine änderungen an der Datenbank damit es mit Firebase kompartibel war.
Erwähnsenswert ist auch die Einindung der Mensadaten, da die Mensa keine API bietet, haben wir selbst einen Crawler geschrieben mit der wie die Daten von den offiziellen Mensaseiten holen. Die Mensadaten werden jeden morgen um 8 Uhr geladen und auf den Server gespeichert. Da hatten wir auch einen Bug, nämlich dass es nicht automatisch aktualisiert wurde. Auch in der Datenbank  haben wir inkonsistenzen gefunden und behoben und am Client gab es z.B. Abstürze ohne, weil versucht wurde auf ungültige oder nicht-existente Objekte zuzugreifen. Mit noch weiteren kleineren Fehlen haben wir insgesam 12 bugs gefunden und behoben. 
Getest wurde dabei am Client mit den Frameworks JUnit, Mockito und Espresso getestet und am Server außschließlich mit JUnit.

>> Folie mit Statistiken: Lines of Code, Commits  

Insgesamt hat unser Programm einen Umfang von xy Zeilen (incl. Kommentare und Leerzeilen) 
Client Source Code: 6906 (incl Testklassen) (Total Lines 11264) 
Server: 2264 (incl Testklassen) 

Commits pro Phase: 
Definitionsphase: 60 Commit
Entwurfsphase: 112 Commit
Implementierungsphase: 109 Commit
Qualitätssicherung: 105 Commit


 
Während der Testphase haben wir nicht nur den Code getestet und Bugs behoben sondern auch die Benutzerfreundlichkeit durch Hallway test getestet. Dazu sind wir an die Uni gegangen und haben im Forum nach geeigneten Probanden gesucht. Als geeignet haben wir Personen eingestuft, die regelmäßig in die Mensa essen gehen. 
Befragt haben wir insgesamt 7 Leute, alle am selben Tag, als Belohnung bzw Anreiz mitzumachen gab es Schokolade. Dadurch hatten wir auch keine Schwierigkeiten bereitwillige Probanden zu finden.


Diese Personen eine kurze Erklrung zu unserer App und mussten mit einem bereits eingeloggten Account folgende Aufgabenliste abarbeiten:

>> Aufgabenliste Als Folie 

Und anschließend folgende Fragen beantworten:

>> Folie Fragebogen


7 Testpersonen mag vielleicht wenig klingen, laut Studien von Jakob Nielsen, der als Vorreiter im Bereich Nutzerfreundlichkeit gilt, reichen aber bereits 5 Probanden um 85% der Usability Probleme zu finden. 
>> Folie Anzahl Probanden
Mit 7 probanden dürften wir also etwa 90% der Proleme gefunden haben. 

Unseren Fragebogen haben wir natürlich ausgewertet 
>> Folie mit unserer auswertung

und festgestellt, dass die App im Allgemeinen als intuitiv Bedienbar und auch das Deisgn angenehm bewertet.

Ausblick
- Gewünscht haben sich die Probanden ein Bewertungssystem für Personen, das stand auch bei uns als Wunschkriterium im ersten Dokument 
- Filtermöglichketen er Gruppen nach Kriterien
- Ein Restriktionen beim Gruppe erstellen
- Pushbenachrichtung 

































