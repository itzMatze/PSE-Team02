Schauspiel

So, ihr habt jetzt unsere Motivation anschaulich gesehen. Wie ihr gesehen habt, ist das Ziel unserer App, dass die Nutzer nicht allein an der Mensa essen gehen müssen, sondern in Gesellschaft von anderen gehen können, wodurch sich auch die Chance bietet neue Kontakte und neue Freundschaftnen zu knüpfen. Das mag besonders für die Menschen intressant sein, die bisher keinen Anschlussan der Uni gefunden haben, aus welchem Grund auch immer: wegen Schüchternheit oder z.B. Studenten die ein Auslandssemester hier machen , aber natürlich auch für all jene, deren Freunde gerade keine Zeit haben oder sogar Gruppen die einfach Lust haben noch neue Leute kennen zu lernen.
Uns war wichtig, dass es keine Dating App wird. Man sollte einfach unvoreingenommen in diese Treffen gehen und daher haben wir bewusst auf die Möglichkeit verzichtet, eigene Profilbilder hochladen zu können. Stattdessen gibt es eine kleine Vorauswahl an Bildern, wie ihr hier nochmal sehen könnt. 

>>Folie mit Screenshot bei ProfilbildAuswahl

Um das ganze trozdem ein wenig Persönlicher zu machen, kann man sich im Profil, ein eigenes Motto einstellen. Das ist ein Freitextfeld, so dass man etwas Platz hat, ein bisschen über sich selbst zu schreiben. Dieses Motto kann man auch jederzeit wieder ändern, also kann man es immer an seiner aktuellen Laune oder seinen aktuellen Intressen anpassen.

Auch beim Gruppe erstellen, wird ein Motto für die Gruppe eingetragen. Dieses Motto kann danach aber nicht mehr geändert werden. 
Das kann man nutzen um dem Treffen schon eine Richtiung mitzugeben,  z.B. kann man reinschreiben "ich möchte Informatiker treffen" oder "Lasst uns Karten spielen" 

Ein Gruppengründer hat keine Sonderrechte gegenüber den anderen Mitgliedern d.h. er kann weder die Gruppe löschen noch irgendwelche Mitglieder rauskicken. Er kann den anderen Mitgliedern also die Verabredung nicht kaputt machen, er kann lediglich selber austreten, dann bleibt die Gruppe einfach ohne ihn weiter bestehen.


>>Folie mit Screenshot innerhalb einer Gruppe


Nun wollen wir noch Vorstellen wie wir die App umgesetzt haben.
Die Vorarbeit für die Implementierung erfolge in der Entwurfsphase, denn da wurden die Klassen und ihre Beziehungen modelliert und geplant auf welche Frameworks wir zurückgreifen wollen.

>>Folie mit allen Frameworks (Mindmap-artig die Namen auf der Folie verteilt, nicht als Liste)

Auf Client seite war klar, dass wir mit Android Studio arbeiten werden, immerhin entwickelten wir eine Android. 
Wir haben das Framework Firebase für die Resgistrierung und Verwaltung der User und Userdaten festgeleg
und Jackson (Object Mapper)sollte für die Umwandlung von JSon Dateien in Klassen sorgen, die bei der Kommunikation zwischen Server und Client vom Server an den Client geschickt werden. 
Auf Server Seite haben wir uns entschieden Spring boot zu nutzen, weil man damit schnell eine lauffähige Anwendung schreiben kann, ohen das viel Konfiguartionsarbeit anfällt und wir Depence Injection nutzen wollten. Die Realisierung der Datenbank wurde mit MySQL geplant und sollte durch das Framework Hibernate in unser Programm eingebunden werden. 

Im Laufe der Phase sind dabei so und so viele Diagramme entstanden: 

>>Folie mit Zahlen wie viele Diagramme es jeweils gab (Kreisdiagramm)





Matze: 

In der Implementierungsphase haben wir dann versucht unser Design möglichst so umzusetzen. 
  
Beim Client musste bei der Implementierung allerdings einiges anders gemacht werden als geplant und auch einiges ergänzt werden. Das lag vor allem daran, dass wir  mit Android Studio und der Funktionsweise von Activitys und deren Lebenszyklen noch sehr wenig Erfahrung hatten. 
Daher war es schwer einen detaiilierten Entwurf im vorraus zu erstellen und an dieser Stelle sehen wir das als Nachteil des Wasserfallmodells, weil man damit alles komplett festgelegt ist und dieses Modell eigentlich keine nachträglichen Änderungen zum Entwurf erlaubt. Man hätte also einen perfekt durchdachten Entwurf, der auch schon komplett funktiontüchtig wäre, machen müssen, was mit unserem Erfahrungslevel einfach nicht möglich war.




Tan:

Für die Server-Seite der anwendung hat das gut funktioniert und wir mussten nur wenige winzige Änderungen vornehmen an unseren Model-Klassen und kleine änderungen an der Datenbank damit es mit Firebase kompartibel war.
Erwähnsenswert ist auch die Einindung der Mensadaten, da die Mensa keine API bietet, haben wir selbst einen Crawler geschrieben mit der wie die Daten von den offiziellen Mensaseiten holen. Die Mensadaten werden jeden morgen um 8 Uhr geladen und auf den Server gespeichert. Da hatten wir auch einen Bug, nämlich dass es nicht automatisch aktualisiert wurde. Auch in der Datenbank  haben wir inkonsistenzen gefunden und behoben und am Client gab es z.B. Abstürze ohne, weil versucht wurde auf ungültige oder nicht-existente Objekte zuzugreifen. Mit noch weiteren kleineren Fehlen haben wir insgesam 12 bugs gefunden und behoben. 
Getest wurde dabei am Client mit den Frameworks JUnit, Mockito und Espresso getestet und am Server außschließlich mit JUnit.

>> Folie mit Statistiken: Lines of Code, Commits  

Insgesamt hat unser Programm einen Umfang von xy Zeilen (incl. Kommentare und Leerzeilen) 
Client Source Code: 6906 (incl Testklassen) (Total Lines 11264) 
Server: 2264 (incl Testklassen) 

Commits pro Phase: 
Definitionsphase: 60 Commit
Entwurfsphase: 112 Commit
Implementierungsphase: 109 Commit
Qualitätssicherung: 105 Commit


 
Während der Testphase haben wir nicht nur den Code getestet und Bugs behoben sondern auch die Benutzerfreundlichkeit durch Hallway test getestet. Dazu sind wir an die Uni gegangen und haben im Forum nach geeigneten Probanden gesucht. Als geeignet haben wir Personen eingestuft, die regelmäßig in die Mensa essen gehen. 
Befragt haben wir insgesamt 7 Leute, alle am selben Tag, als Belohnung bzw Anreiz mitzumachen gab es Schokolade. Dadurch hatten wir auch keine Schwierigkeiten bereitwillige Probanden zu finden.


Diese Personen eine kurze Erklrung zu unserer App und mussten mit einem bereits eingeloggten Account folgende Aufgabenliste abarbeiten:

>> Aufgabenliste Als Folie 

Und anschließend folgende Fragen beantworten:

>> Folie Fragebogen


7 Testpersonen mag vielleicht wenig klingen, laut Studien von Jakob Nielsen, der als Vorreiter im Bereich Nutzerfreundlichkeit gilt, reichen aber bereits 5 Probanden um 85% der Usability Probleme zu finden. 
>> Folie Anzahl Probanden
Mit 7 probanden dürften wir also etwa 90% der Proleme gefunden haben. 

Unseren Fragebogen haben wir natürlich ausgewertet 
>> Folie mit unserer auswertung

und festgestellt, dass die App im Allgemeinen als intuitiv Bedienbar und auch das Deisgn angenehm bewertet.

Ausblick
- Gewünscht haben sich die Probanden ein Bewertungssystem für Personen, das stand auch bei uns als Wunschkriterium im ersten Dokument 
- Filtermöglichketen er Gruppen nach Kriterien
- Ein Restriktionen beim Gruppe erstellen
- Pushbenachrichtung als Erinnerung und wenn sich an der Gruppe etwas ändernt
	(z.b. jmd ein/austritt)

































